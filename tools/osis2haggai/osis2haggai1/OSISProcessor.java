/* Copyright (C) 2014-2015  Stephan Kreutzer
 *
 * This file is part of osis2haggai1.
 *
 * osis2haggai1 is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License version 3 or any later version,
 * as published by the Free Software Foundation.
 *
 * osis2haggai1 is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License 3 for more details.
 *
 * You should have received a copy of the GNU Affero General Public License 3
 * along with osis2haggai1. If not, see <http://www.gnu.org/licenses/>.
 */
/**
 * @file $/OSISProcessor.java
 * @brief Processor for OSIS files.
 * @author Stephan Kreutzer
 * @since 2014-02-12
 */



import java.io.File;
import javax.xml.stream.XMLInputFactory;
import java.io.InputStream;
import java.io.FileInputStream;
import javax.xml.stream.XMLEventReader;
import javax.xml.stream.events.XMLEvent;
import java.io.BufferedWriter;
import java.io.OutputStreamWriter;
import java.io.FileOutputStream;
import java.io.FileNotFoundException;
import javax.xml.stream.XMLStreamException;
import java.io.UnsupportedEncodingException;
import java.io.IOException;
import javax.xml.namespace.QName;
import javax.xml.stream.events.Attribute;
import java.util.Map;
import java.util.HashMap;
import javax.xml.stream.events.Characters;
import java.util.Stack;
import java.util.Iterator;



class OSISProcessor
{
    public OSISProcessor()
    {
    
    }

    public boolean processFile(File inOSISFile,
                               File outHaggaiFile,
                               String outTitle,
                               boolean xmlReaderDTDValidation,
                               boolean xmlReaderNamespaceProcessing,
                               boolean xmlReaderCoalesceAdjacentCharacterData,
                               boolean xmlReaderReplaceEntityReferences,
                               boolean xmlReaderResolveExternalParsedEntities,
                               boolean xmlReaderUseDTDFallback)
    {
        /**
         * @todo Maybe check besides exception handler, if in/out files
         *     are existing, readable, etc.?
         */


        try
        {
            XMLInputFactory inputFactory = XMLInputFactory.newInstance();

            inputFactory.setProperty("javax.xml.stream.isValidating", xmlReaderDTDValidation);
            inputFactory.setProperty("javax.xml.stream.isNamespaceAware", xmlReaderNamespaceProcessing);
            inputFactory.setProperty("javax.xml.stream.isCoalescing", xmlReaderCoalesceAdjacentCharacterData);
            inputFactory.setProperty("javax.xml.stream.isReplacingEntityReferences", xmlReaderReplaceEntityReferences);
            inputFactory.setProperty("javax.xml.stream.isSupportingExternalEntities", xmlReaderResolveExternalParsedEntities);
            inputFactory.setProperty("javax.xml.stream.supportDTD", xmlReaderUseDTDFallback);

            InputStream in = new FileInputStream(inOSISFile);
            XMLEventReader eventReader = inputFactory.createXMLEventReader(in, "UTF8");

            XMLEvent event = null;
            
            BufferedWriter writer = new BufferedWriter(
                                    new OutputStreamWriter(
                                    new FileOutputStream(outHaggaiFile.getAbsolutePath()),
                                    "UTF8"));

            
            writer.write("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n");
            writer.write("<XMLBIBLE xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"haggai_20130620.xsd\" biblename=\"" + outTitle + "\" status=\"v\" version=\"haggai_3.0.0.9.1\" revision=\"0\">\n");
            writer.write("  <!-- This file was generated by osis2haggai1, which is free software licensed under the GNU Affero General Public License 3 or any later version (see https://github.com/free-scriptures/free-scriptures/ and http://www.free-scriptures.org). -->\n");


            // An alternative to some of the state information keeping variables below.
            Stack<StructureStackElement> structureStack = new Stack<StructureStackElement>();

            String osisIDWork = null;
            boolean firstOSISText = false;
            boolean header = false;
            boolean metadata = false;
            HashMap<String, String> metadataMap = new HashMap<String, String>();
            boolean readingMetadata = false;
            String metadataMapKey = "";
            boolean body = false;
            boolean readingBook = false;
            boolean readingChapter = false;
            boolean readingVerse = false;
            boolean readingNote = false;
            boolean readingTitle = false;

            int bookNumber = 0;
            String chapterID = "";
            int chapterNumberCurrent = 0;
            int chapterNumberLast = 0;
            String verseID = "";
            int verseNumberCurrent = 0;
            int verseNumberLast = 0;
            
            boolean paragraphSpan = false;

            while (eventReader.hasNext() == true)
            {
                event = eventReader.nextEvent();

                if (event.isStartElement() == true)
                {
                    QName elementName = event.asStartElement().getName();
                    String fullElementName = elementName.getLocalPart();
                    
                    if (elementName.getPrefix().isEmpty() != true)
                    {
                        fullElementName = elementName.getPrefix() + ":" + fullElementName;
                    }

                    boolean isInOutput = true;
                    boolean isBook = false;
                    String associatedAttributes = new String();

                    if (fullElementName.equalsIgnoreCase("osisText") == true)
                    {
                        if (firstOSISText == false)
                        {
                            Attribute attributeOSISIDWork = event.asStartElement().getAttributeByName(new QName("osisIDWork"));
                                
                            if (attributeOSISIDWork != null)
                            {
                                osisIDWork = attributeOSISIDWork.getValue();
                            }
                            else
                            {
                                System.out.print("osis2haggai1: 'osisIDWork' of first text is missing.\n");
                                System.exit(-14);
                            }
                            
                            firstOSISText = true;
                        }
                        else
                        {
                            // No multi-text files.
                            break;
                        }
                    }
                    else if (fullElementName.equalsIgnoreCase("header") == true)
                    {
                        header = true;
                    }
                    else if (fullElementName.equalsIgnoreCase("work") == true)
                    {
                        if (header == true)
                        {
                            Attribute attributeOSISWork = event.asStartElement().getAttributeByName(new QName("osisWork"));

                            if (attributeOSISWork != null &&
                                osisIDWork != null)
                            {
                                if (attributeOSISWork.getValue().equals(osisIDWork) == true)
                                {
                                    if (metadataMap.size() > 0)
                                    {
                                        System.out.print("osis2haggai1: Multiple metadata for osisIDWork '" + osisIDWork + "'.\n");
                                    }
                                
                                    metadata = true;
                                }
                            }
                        }
                    }
                    else if (metadata == true)
                    {
                        if (fullElementName.equalsIgnoreCase("title") == true ||
                            fullElementName.equalsIgnoreCase("creator") == true ||
                            fullElementName.equalsIgnoreCase("description") == true ||
                            fullElementName.equalsIgnoreCase("publisher") == true ||
                            fullElementName.equalsIgnoreCase("identifier") == true ||
                            fullElementName.equalsIgnoreCase("language") == true ||
                            fullElementName.equalsIgnoreCase("rights") == true ||
                            fullElementName.equalsIgnoreCase("scope") == true)
                        {
                            metadataMapKey = fullElementName;
                            readingMetadata = true;
                        }
                        else if (fullElementName.equalsIgnoreCase("refSystem") == true ||
                                 fullElementName.equalsIgnoreCase("type") == true)
                        {
                            // Ignore.
                        }
                        else
                        {
                            System.out.print("osis2haggai1: Metadata element '" + fullElementName + "' omitted.\n");
                        }
                    }
                    else if (fullElementName.equalsIgnoreCase("div") == true)
                    {
                        if (body == true)
                        {
                            Attribute attributeType = event.asStartElement().getAttributeByName(new QName("type"));

                            if (attributeType != null)
                            {
                                if (attributeType.getValue().equals("book") == true)
                                {
                                    if (readingBook == true)
                                    {
                                        System.out.println("osis2haggai1: Book " + bookNumber + ": Nested Bible books found.");
                                        System.exit(-1);
                                    }

                                    readingBook = true;
                                    isBook = true;

                                    verseNumberCurrent = 0;
                                    verseNumberLast = 0;
                                    chapterNumberCurrent = 0;
                                    chapterNumberLast = 0;
                                    bookNumber += 1;
                                
                                    if (bookNumber == 1)
                                    {
                                        writer.write("  <BIBLEBOOK bnumber=\"" + bookNumber + "\">\n");
                                    }
                                    else
                                    {
                                        writer.write("  </BIBLEBOOK>\n");
                                        writer.write("  <BIBLEBOOK bnumber=\"" + bookNumber + "\">\n");
                                    }
                                }
                            }
                        }
                    }
                    else if (fullElementName.equalsIgnoreCase("chapter") == true)
                    {
                        verseNumberCurrent = 0;
                        verseNumberLast = 0;
                    
                        Attribute attributeStartID = event.asStartElement().getAttributeByName(new QName("sID"));
                        Attribute attributeEndID = event.asStartElement().getAttributeByName(new QName("eID"));
                        
                        if (attributeStartID != null)
                        {
                            Attribute attributeNumber = event.asStartElement().getAttributeByName(new QName("n"));

                            if (attributeNumber != null)
                            {
                                String attributeNumberString = attributeNumber.getValue();

                                if (attributeNumberString.contains("-") == true)
                                {
                                    String[] span = attributeNumberString.split("-");
                                    
                                    writer.write("    <!-- This chapter spans from " + span[0] + " to " + span[1] + " -->\n");
                                    
                                    attributeNumberString = span[0];
                                }
                                
                                chapterNumberCurrent = Integer.parseInt(attributeNumberString);
                            }
                            else
                            {
                                chapterNumberCurrent = chapterNumberLast + 1;
                            }

                            if (chapterNumberLast < chapterNumberCurrent)
                            {
                                chapterNumberLast = chapterNumberCurrent;
                            }
                            else
                            {
                                System.out.print("osis2haggai1: Book " + bookNumber + ": chapter " + chapterNumberCurrent + " detected after chapter " + chapterNumberLast + " - output continues with " + (chapterNumberLast + 1) + ".\n");

                                chapterNumberCurrent = chapterNumberLast + 1;
                                chapterNumberLast = chapterNumberCurrent;
                            }

                            chapterID = attributeStartID.getValue();
                            
                            writer.write("    <CHAPTER cnumber=\"" + chapterNumberCurrent + "\">\n");
                        }
                        else if (attributeEndID != null)
                        {
                            chapterID = "";
                            chapterNumberCurrent = 0;
                        
                            writer.write("    </CHAPTER>\n");
                        }
                        else
                        {
                            readingChapter = true;
                            
                            Attribute attributeNumber = event.asStartElement().getAttributeByName(new QName("n"));

                            if (attributeNumber != null)
                            {
                                String attributeNumberString = attributeNumber.getValue();

                                if (attributeNumberString.contains("-") == true)
                                {
                                    String[] span = attributeNumberString.split("-");
                                    
                                    writer.write("    <!-- This chapter spans from " + span[0] + " to " + span[1] + " -->\n");
                                    
                                    attributeNumberString = span[0];
                                }
                                
                                chapterNumberCurrent = Integer.parseInt(attributeNumberString);
                            }
                            else
                            {
                                chapterNumberCurrent = chapterNumberLast + 1;
                            }
                            
                            if (chapterNumberLast < chapterNumberCurrent)
                            {
                                chapterNumberLast = chapterNumberCurrent;
                            }
                            else
                            {
                                System.out.print("osis2haggai1: Book " + bookNumber + ": chapter " + chapterNumberCurrent + " detected after chapter " + chapterNumberLast + " - output continues with " + (chapterNumberLast + 1) + ".\n");

                                chapterNumberCurrent = chapterNumberLast + 1;
                                chapterNumberLast = chapterNumberCurrent;
                            }

                            writer.write("    <CHAPTER cnumber=\"" + chapterNumberCurrent + "\">\n");
                        }
                    }
                    else if (fullElementName.equalsIgnoreCase("p") == true &&
                             body == true)
                    {
                        if (verseID.isEmpty() == true)
                        {
                            if (paragraphSpan == true)
                            {
                                writer.write("      </PARAGRAPH>\n");
                            }
                            
                            paragraphSpan = false;

                            writer.write("      <PARAGRAPH>\n");
                        }
                        else
                        {
                            paragraphSpan = true;

                            writer.write("<!-- Paragraph beginning within a verse. -->");
                        }
                    }
                    else if (fullElementName.equalsIgnoreCase("verse") == true)
                    {
                        Attribute attributeStartID = event.asStartElement().getAttributeByName(new QName("sID"));
                        Attribute attributeEndID = event.asStartElement().getAttributeByName(new QName("eID"));
                        
                        if (attributeStartID != null)
                        {
                            Attribute attributeNumber = event.asStartElement().getAttributeByName(new QName("n"));

                            if (attributeNumber != null)
                            {
                                String attributeNumberString = attributeNumber.getValue();
                                
                                if (attributeNumberString.contains("-") == true)
                                {
                                    String[] span = attributeNumberString.split("-");
                                    
                                    writer.write("        <!-- This verse spans from " + span[0] + " to " + span[1] + " -->\n");
                                    
                                    attributeNumberString = span[0];
                                }

                                verseNumberCurrent = Integer.parseInt(attributeNumberString);
                            }
                            else
                            {
                                verseNumberCurrent = verseNumberLast + 1;
                            }
                            
                            if (verseNumberLast < verseNumberCurrent)
                            {
                                verseNumberLast = verseNumberCurrent;
                            }
                            else
                            {
                                System.out.print("osis2haggai1: Book " + bookNumber + ", chapter " + chapterNumberCurrent + ": verse " + verseNumberCurrent + " detected after verse " + verseNumberLast + " - output continues with " + (verseNumberLast + 1) + ".\n");

                                verseNumberCurrent = verseNumberLast + 1;
                                verseNumberLast = verseNumberCurrent;
                            }
                            
                            verseID = attributeStartID.getValue();
                            
                            writer.write("        <VERSE vnumber=\"" + verseNumberCurrent + "\">");

                            readingVerse = true;
                        }
                        else if (attributeEndID != null)
                        {
                            if (readingVerse != true)
                            {
                                System.out.print("osis2haggai1: Book " + bookNumber + ", chapter " + chapterNumberCurrent + ": Verse end with no corresponding verse start detected around verse number " + verseNumberCurrent + ".\n");
                                System.exit(-1);
                            }

                            verseID = "";
                            verseNumberCurrent = 0;
                        
                            writer.write("</VERSE>\n");

                            readingVerse = false;
                        }
                        else
                        {
                        
                        }
                    }
                    else if (fullElementName.equalsIgnoreCase("note") == true &&
                             readingVerse == true)
                    {
                        for (int i = structureStack.size(); i > 0; i--)
                        {
                            StructureStackElement structureStackElement = structureStack.get(i - 1);
                            
                            if ((structureStackElement.GetElement().equals("seg") == true ||
                                 structureStackElement.GetElement().equals("transChange") == true) &&
                                structureStackElement.GetIsInOutput() == true)
                            {
                                // The style markup around the note never affects the text
                                // within the note itself, so close it here and start it
                                // after the note again.
                                writer.write("</STYLE>");
                            }
                        }
                    
                        writer.write("<NOTE>");

                        readingNote = true;

                        Attribute attributeType = event.asStartElement().getAttributeByName(new QName("type"));
                        
                        if (attributeType != null)
                        {
                            String type = attributeType.getValue();
                            
                            /** @todo Map footnote type to Haggai XML footnote types. */
                        }
                    }
                    else if (fullElementName.equalsIgnoreCase("title") == true)
                    {
                        if (readingBook == true &&
                            readingChapter != true &&
                            readingVerse != true)
                        {
                            writer.write("    <CAPTION>");
                        
                            while (eventReader.hasNext() == true)
                            {
                                event = eventReader.nextEvent();

                                if (event.isStartElement() == true)
                                {
                                    elementName = event.asStartElement().getName();
                                    fullElementName = elementName.getLocalPart();
                                    
                                    if (elementName.getPrefix().isEmpty() != true)
                                    {
                                        fullElementName = elementName.getPrefix() + ":" + fullElementName;
                                    }
                                   
                                    if (fullElementName.equalsIgnoreCase("title") == true)
                                    {
                                        System.out.println("osis2haggai1: Book " + bookNumber + ": Nested Bible book title found.");
                                        System.exit(-1);
                                    }
                                }
                                else if (event.isCharacters() == true)
                                {
                                    event.writeAsEncodedUnicode(writer);
                                }
                                else if (event.isEndElement() == true)
                                {
                                    elementName = event.asEndElement().getName();
                                    fullElementName = elementName.getLocalPart();
                                    
                                    if (elementName.getPrefix().isEmpty() != true)
                                    {
                                        fullElementName = elementName.getPrefix() + ":" + fullElementName;
                                    }
                                    
                                    if (fullElementName.equalsIgnoreCase("title") == true)
                                    {
                                        writer.write("</CAPTION>\n");
                                        break;
                                    }
                                }
                            }
                            
                            continue;
                        }
                    }
                    else if (fullElementName.equalsIgnoreCase("hi") == true &&
                             (readingVerse == true ||
                              readingNote == true))
                    {
                        Attribute attributeType = event.asStartElement().getAttributeByName(new QName("type"));

                        if (attributeType != null)
                        {
                            String attributeTypeString = attributeType.getValue();

                            if (attributeTypeString.equals("italic") == true)
                            {
                                writer.write("<STYLE fs=\"italic\">");
                            }
                            else if (attributeTypeString.equals("super") == true)
                            {
                                writer.write("<STYLE fs=\"super\">");
                            }
                            else
                            {
                                isInOutput = false;
                            }
                        }
                    }
                    else if (fullElementName.equalsIgnoreCase("seg") == true)
                    {
                        Attribute attributeType = event.asStartElement().getAttributeByName(new QName("type"));

                        if (attributeType != null)
                        {
                            String attributeTypeString = attributeType.getValue();

                            if (attributeTypeString.equals("x-alternative") == true)
                            {
                                writer.write("<STYLE class=\"alternative\">");
                                associatedAttributes = "class=\"alternative\"";
                            }
                            else
                            {
                                isInOutput = false;
                            }
                        }
                    }
                    else if (fullElementName.equalsIgnoreCase("transChange") == true)
                    {
                        Attribute attributeType = event.asStartElement().getAttributeByName(new QName("type"));

                        if (attributeType != null)
                        {
                            String attributeTypeString = attributeType.getValue();

                            if (attributeTypeString.equals("deleted") == true)
                            {
                                writer.write("<STYLE class=\"deleted\">");
                                associatedAttributes = "class=\"deleted\"";
                            }
                            else
                            {
                                isInOutput = false;
                            }
                        }
                    }

                    structureStack.push(new StructureStackElement(fullElementName, isInOutput, isBook, associatedAttributes));
                }
                else if (event.isEndElement() == true)
                {
                    QName elementName = event.asEndElement().getName();
                    String fullElementName = elementName.getLocalPart();
                    
                    if (elementName.getPrefix().isEmpty() != true)
                    {
                        fullElementName = elementName.getPrefix() + ":" + fullElementName;
                    }

                    if (fullElementName.equalsIgnoreCase("osisText") == true)
                    {
                        // No multi-text files.
                        firstOSISText = false;
                        break;
                    }
                    else if (fullElementName.equalsIgnoreCase("header") == true)
                    {
                        header = false;
                        body = true;
                    }
                    else if (fullElementName.equalsIgnoreCase("work") == true)
                    {
                        if (header == true)
                        {
                            if (metadata == true)
                            {
                                if (metadataMap.size() <= 0)
                                {
                                    System.out.print("osis2haggai1: No metadata.\n");
                                    System.exit(-15);
                                }
                                

                                writer.write("  <INFORMATION>\n");
                                
                                if (metadataMap.containsKey("title") == true)
                                {
                                    writer.write("    <title>" + metadataMap.get("title") + "</title>\n");
                                }
                                
                                if (metadataMap.containsKey("creator") == true)
                                {
                                    writer.write("    <creator>" + metadataMap.get("creator") + "</creator>\n");
                                }
                                
                                if (metadataMap.containsKey("description") == true)
                                {
                                    writer.write("    <description>" + metadataMap.get("description") + "</description>\n");
                                }
                                
                                if (metadataMap.containsKey("publisher") == true)
                                {
                                    writer.write("    <publisher>" + metadataMap.get("publisher") + "</publisher>\n");
                                }
                                
                                // date
                                
                                writer.write("    <type>Text</type>\n");
                                writer.write("    <format>Haggai XML Bible Markup Language</format>\n");
                                
                                if (metadataMap.containsKey("identifier") == true)
                                {
                                    String identifier = metadataMap.get("identifier");
                                    int identifierLength = identifier.length();

                                    writer.write("    <identifier>");

                                    for (int i = 0; i < identifierLength; i++)
                                    {
                                        char c = identifier.charAt(i);   
                                        
                                        if (Character.isLetterOrDigit(c) == true ||
                                            c == '_')
                                        {
                                            writer.write(c);
                                        }
                                        else
                                        {
                                            writer.write("_");
                                        }
                                    }

                                    writer.write("</identifier>\n");
                                }
                                
                                if (metadataMap.containsKey("language") == true)
                                {
                                    writer.write("    <language>" + metadataMap.get("language") + "</language>\n");
                                }
                                
                                if (metadataMap.containsKey("scope") == true)
                                {
                                    writer.write("    <coverage>" + metadataMap.get("scope") + "</coverage>\n");
                                }
                                
                                if (metadataMap.containsKey("rights") == true)
                                {
                                    writer.write("    <rights>" + metadataMap.get("rights") + "</rights>\n");
                                }

                                writer.write("  </INFORMATION>\n");
                            }
                            
                            metadata = false;
                        }
                    }
                    else if (metadata == true)
                    {
                        if (readingMetadata == true &&
                            fullElementName.equalsIgnoreCase(metadataMapKey) == true)
                        {
                            readingMetadata = false;
                            metadataMapKey = "";
                        } 
                    }
                    else if (fullElementName.equalsIgnoreCase("chapter") == true)
                    {
                        if (readingChapter == true)
                        {
                            readingChapter = false;

                            verseID = "";
                            verseNumberCurrent = 0;
                            verseNumberLast = 0;
                            chapterID = "";
                            chapterNumberCurrent = 0;
                        
                            writer.write("    </CHAPTER>\n");
                        }
                    }
                    else if (fullElementName.equalsIgnoreCase("p") == true &&
                             body == true)
                    {
                        if (verseID.isEmpty() == true)
                        {
                            paragraphSpan = false;
                        
                            writer.write("      </PARAGRAPH>\n");
                        }
                        else
                        {
                            paragraphSpan = true;

                            writer.write("<!-- Paragraph ending within a verse. -->");
                        }
                    }
                    else if (fullElementName.equalsIgnoreCase("note") == true &&
                             readingVerse == true &&
                             readingNote == true)
                    {
                        writer.write("</NOTE>");

                        readingNote = false;

                        for (int i = structureStack.size(); i > 0; i--)
                        {
                            StructureStackElement structureStackElement = structureStack.get(i - 1);
                            
                            if ((structureStackElement.GetElement().equals("seg") == true ||
                                 structureStackElement.GetElement().equals("transChange") == true) &&
                                structureStackElement.GetIsInOutput() == true)
                            {
                                writer.write("<STYLE " + structureStackElement.GetAssociatedAttributes() + ">");
                            }
                        }
                    }
                    else if (fullElementName.equalsIgnoreCase("hi") == true &&
                             (readingVerse == true ||
                              readingNote == true))
                    {
                        if (structureStack.empty() != true)
                        {
                            StructureStackElement currentElement = structureStack.peek();
                            
                            if (currentElement.GetIsInOutput() == true)
                            {
                                writer.write("</STYLE>");
                            }
                        }
                    }
                    else if (fullElementName.equalsIgnoreCase("seg") == true)
                    {
                        if (structureStack.empty() != true)
                        {
                            StructureStackElement currentElement = structureStack.peek();
                            
                            if (currentElement.GetIsInOutput() == true)
                            {
                                writer.write("</STYLE>");
                            }
                        }
                    }
                    else if (fullElementName.equalsIgnoreCase("transChange") == true)
                    {
                        if (structureStack.empty() != true)
                        {
                            StructureStackElement currentElement = structureStack.peek();
                            
                            if (currentElement.GetIsInOutput() == true)
                            {
                                writer.write("</STYLE>");
                            }
                        }
                    }
                    
                    if (structureStack.empty() != true)
                    {
                        StructureStackElement currentElement = structureStack.peek();
                        
                        if (currentElement.GetIsBook() == true)
                        {
                            if (readingBook == true)
                            {
                                readingBook = false;
                            }
                            else
                            {
                                System.out.println("osis2haggai1: The end of a Bible book was reached outside of a Bible book.");
                                System.exit(-1);
                            }
                        }
                    }

                    structureStack.pop();
                }
                else if (event.isCharacters() == true)
                {
                    if (readingMetadata == true)
                    {
                        if (metadataMap.containsKey(metadataMapKey) == true)
                        {
                            //metadataMap.put(metadataMapKey, metadataMap.get(metadataMapKey) + "<separator/>" + event.asCharacters().getData());
                            metadataMap.put(metadataMapKey, metadataMap.get(metadataMapKey) + "; " + event.asCharacters().getData());
                        }
                        else
                        {
                            metadataMap.put(metadataMapKey, event.asCharacters().getData());
                        }
                    }
                    else if (body == true)
                    {
                        if (verseID.isEmpty() == false)
                        {
                            event.writeAsEncodedUnicode(writer);
                        }
                    }
                }
            }

            if (bookNumber > 0)
            {
                writer.write("  </BIBLEBOOK>\n");
            }

            writer.write("</XMLBIBLE>\n");
            
            writer.flush();
            writer.close();
        }
        catch (FileNotFoundException ex)
        {
            ex.printStackTrace();
            System.exit(-16);
        }
        catch (XMLStreamException ex)
        {
            ex.printStackTrace();
            System.exit(-17);
        }
        catch (UnsupportedEncodingException ex)
        {
            ex.printStackTrace();
            System.exit(-18);
        }
        catch (IOException ex)
        {
            ex.printStackTrace();
            System.exit(-19);
        }

        return true;
    }
}

class StructureStackElement
{
    public StructureStackElement(String element, boolean isInOutput, boolean isBook, String associatedAttributes)
    {
        this.element = element;
        this.isInOutput = isInOutput;
        this.isBook = isBook;
        this.associatedAttributes = associatedAttributes;
    }
    
    public String GetElement()
    {
        return this.element;
    }
    
    public boolean GetIsInOutput()
    {
        return this.isInOutput;
    }
    
    public boolean GetIsBook()
    {
        return this.isBook;
    }
    
    public String GetAssociatedAttributes()
    {
        return this.associatedAttributes;
    }
    
    protected String element;
    protected boolean isInOutput;
    protected boolean isBook;
    protected String associatedAttributes;
}

